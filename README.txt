ЗАПУСК
Для запуска игры необходимо открыть файл project.lua через lua интерпретатор.

ПРИМЕР РАБОТЫ
В папке "Примеры" приложены скриншоты работы программы на Windows

АРХИТЕКТУРА ПРОЕКТА
project - скрипт, управляющий основной логикой, и системой ввода-вывода.
Settings - класс, отвечающий за основные настройки игры: 
- размер игрового поля
- возможные цвета ячеек
- цвет удаленной ячейки (необходим для избегания работы с нулевыми полями)
Cell - класс, содержащий в себе информацию о ячейке (ее тип и значение/цвет).
Coordinate - вспомогательный класс, содержащий в себе координаты X и Y.
Logic - подобие интерфейса класса для основной логики игры (для нормальной работы проекта все его методы должны быть определены).
TestLogic - реализация интерфейса Logic, в этом классе содержится вся основная логика игры.
Input - класс, отвечающий за ввод данных игрока через командную строку и их преобразование в необходимые значения для дальнейшей обработки.
Visualizer - класс, отвечающий за вывод игровых данных в командную строку (на данный момент, только визуализация игрового поля).

ДОРАБОТКИ И ОТКЛОНЕНИЯ ОТ ИЗНАЧАЛЬНОГО ТЗ
1) Основные методы из изначального ТЗ пришлось разделить на 2 класса: 
- методы init(), tick(), move(), mix() принадлежат классу Logic
- метод dump() принадлежит классу Visualizer
2) Метод move() кроме совершения перемещения ячейки/алмаза так же возвращает булевое значение, было ли совершено это 
перемещение. Данную проверку экземпляр класса Input выполнить не может, так как не имеет информации об игровом поле 
(и не должен).
3) Реализована обработка некорректного ввода данных от пользователя с подсказками.
4) Реализована возможность менять размеры игрового поля и количество цветов.

ДАЛЬНЕЙШАЯ ДОРАБОТКА ПРОЕКТА И ПОЯСНЕНИЯ
1) Реализована возможность добавить дополнительные типы ячеек, но обработки этих типов не реализовано, так как могут быть 
различные варианты взаимодействий разных типов. Например, новый тип может объединяться ячейками тип simple, а другой тип 
будет объединяться только с ячейками того же типа. Всю эту обработку придется дописывать в логику.
2) Класс TestLogic получился очень громоздким, особенно некоторые его методы. Есть смысл попытаться создать вспомогательные 
классы, например GridWork для обработки действий с игровым полем (создание нового поля, проверка на возможные ходы). Так же 
стоит подумать над упрощением методов с большим количеством циклов, и, по возможности, убрать лишние циклы.
3) В основном цикле программы (project.lua) в 29-31 находится цикл перемешивания поля, пока не появится возможный ход. Этот 
процесс можно перенести в метод TestLogic:shuffleGrid(), если у нас точно не будет необходимости показывать процесс перемешивания поля игроку.
